user $user;

#进程优化，资源的充分利用，减少资源争夺
worker_processes $WORK_PROCESSES;
worker_cpu_affinity $WORKER_CPU_AFFINITY;

pcre_jit on;
#限制使用的文件描述符的数量，防止出现502错误
worker_rlimit_nofile $WORKER_RLIMIT_NOFILE;

#这个设置是让worker平均分配请求
events {
  use epoll;
  worker_connections $WORKER_CONNECTIONS;
  multi_accept off;
}

#定义线程池，在io操作的时候配置上去
thread_pool io_pool threads=16;

http {

    #负载均衡配置
    upstream user_upstearm{
      server 127.0.0.1:81 weight=1 max_fails=2 fail_timeout=60;
      #支持keep_alive
      #连接池里面最大的空闲连接数量
      #keepalive 15;
    }

    upstream user_grpc_upstearm{
      server 127.0.0.1:8888 weight=1;
      #支持keep_alive
      #连接池里面最大的空闲连接数量,尽量小
      keepalive 15;
    }

    map $http_upgrade $connection_upgrade {
      default upgrade;
      '' close;
    }

    #包含传输优化相关配置
    include /etc/nginx/config/transmission_optimization.conf;
    #http相关优化
    include /etc/nginx/config/http_limit_optimization.conf;

    #lua初始化
    include /etc/nginx/config/init_lua.conf;
  
    include /etc/nginx/config/resolve.conf;

    #并发限制池
    limit_conn_zone $binary_remote_addr zone=limit_zone:10m;
    #请求限制池，在这种情况下，将为一个名为“one”的区域分配10MB，这个区域的平均查询速度为每秒最多200个请求。
    limit_req_zone $binary_remote_addr zone=limit_req_zone:10m rate=200r/s;

    #指定错误页面
    error_page    404           /404.html;

    #注释填充功能，当返回码大于400的时候填充到512字节，如果不填充则会显示浏览器的错误页面
    msie_padding on;

    #keep_alive相关
    #keepalive_timeout 120s 120s;
    #keepalive_requests 10000; 

    #指定缓存目录levels设置目录层次，      
    #keys_zone设置缓存名字和共享内存大小，
    #inactive在指定时间内没人访问则被删除在这里是1天，
    #max_size最大缓存空间。
    proxy_cache_path /tmp/ngx_cache levels=1:2 keys_zone=nginx_proxy_zone:100m inactive=1d max_size=5g;
    #启用将head请求和转化为get请求缓存，默认开启，开启的时候需要设置缓存键值包含$request_method

    #配置log
    include /etc/nginx/config/log.conf;
    server {
      #获取环境变量
      #server_name $USER_SERVER_NAME;
      server_name _;
      #重定向时沿用当前servername
      server_name_in_redirect on;
      #重定向时沿用当前的port
      port_in_redirect on;

      #log
      error_log $LOGPATH/user_server_error.log debug;
      access_log  $LOGPATH/user_server_error.log weblog;

      listen 80;

      location = /404.html {
        root /usr/share/nginx/html;
      }

      #静态文件缓存
      location ~ (.*)\.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|woff|ttf)$ {
        root /apps;
        expires 7d; 

        #这里是前端命中
        try_files $uri $uri/ =404;
        add_header Access-Control-Allow-Origin *;
        access_log off;
      }

      location ~ /(.*)\.(js|css)
      {
        root /apps;
        try_files $uri $uri/ =404;
        add_header Cache-Control no-cache;
        expires      1h;
        access_log off;
        #app静态资源缓存
        include /etc/nginx/config/app_static_source.conf;   
      }

      location = /
      {
        deny all;
      }

      #location ~ .*\.(?:htm|html)$ {
      #  try_files /$main_root/$uri /$main_root/$uri;
      #  add_header Cache-Control "private, no-store, no-cache, must-revalidate, proxy-revalidate";
      #}

      #后端命中
      location / {
        #设置之后排除redis头，排除127.0.0.1主机,如果upsteam里面有其他的请再添加一行
        set_real_ip_from 127.0.0.1;
        real_ip_header    X-Forwarded-For;
        real_ip_recursive on; 
        #try_files $uri $uri/ =404;
        default_type 'text/html';

        content_by_lua_file /etc/nginx/lua/access_limit.lua;
      }

      #前端命中
      location /vue_user_pro {
        root /apps;
        index index.html;
        try_files $uri $uri/ /vue_user_pro/index.html;
        add_header Cache-Control no-store;
        add_header Pragma no-cache;
      }

      #手动清除nginx缓存，只允许本地访问, 这个模块需要手动安装，目前先剔除，以后抽时间研究docker 
      #location ~ /purge(/.*) {
      #  allow              127.0.0.1;
      #  deny               all;
      #  proxy_cache_purge  nginx_proxy_zone $host$1$is_args$args$cookie_us_user_cookie;
      #}

      #设置哪些链接无需缓存
      #if ($request_uri ~ ^/(login|search)){
      #  set $nocache 1;
      #}


      #lua脚本中被引用
      location @client{
        #并发数目限制
        #一个客户端id只能同时启用200个连接
        limit_conn limit_zone 200;
        #这个区域最多同时处理不超过200个查询，
        #如果在burst值之外的额外请求不可用，可以使用nodelay参数，否则等待
        limit_req zone=limit_req_zone burst=200;
        #设置重试次数为
        proxy_next_upstream_tries 3;
        #设置最长重试时间，超过时间则停止重试
        proxy_next_upstream_timeout 10s;
        proxy_pass http://user_upstearm;
        #给api设置的proxy_conf
        include /etc/nginx/config/cors.conf;
        include /etc/nginx/config/api_proxy.conf;
      }
    }

    #rpc代理
    server {
      listen 8080 http2;
      server_name $USER_SERVER_NAME;

      #log
      error_log $LOGPATH/user_rpc_server_error.log debug;
      access_log  $LOGPATH/user_rpc_server_error.log weblog;

      location / {
        # Replace localhost:50051 with the address and port of your gRPC server
        # The 'grpc://' prefix is optional; unencrypted gRPC is the default  
        grpc_pass grpc://user_grpc_upstearm;
        keepalive_timeout 120s 120s;
        keepalive_requests 10000; 

        #给api设置的proxy_conf
        include /etc/nginx/config/grpc_proxy.conf;
        error_page 502 = /error502grpc;
      }


      #错误返回
      location = /error502grpc {
        internal;
        default_type application/grpc;
        add_header grpc-status 14;
        add_header grpc-message "unavailable";
        return 204;
      }
    }

    include /etc/nginx/conf.d/*.conf;

  }
